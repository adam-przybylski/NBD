version: '3.8'
services:
  mongo_1:
      build:
        context: .
        dockerfile: Dockerfile
      image: mongo:6-jammy
      container_name: mongodb1
      hostname: mongodb1
      networks:
        - mongonet
      ports:
        - "27017:27017"
      environment:
         - MONGO_INITDB_ROOT_USERNAME=admin
         - MONGO_INITDB_ROOT_PASSWORD=adminpassword
      command: --config /etc/mongod.conf --port 27017 --replSet replica_set_single
      healthcheck:
        test: [ "CMD", "mongosh", "--port", "27017","--eval", "db.adminCommand('ping')" ]
        interval: 10s
        timeout: 2s
        retries: 5

  mongo_2:
        build:
          context: .
          dockerfile: Dockerfile
        image: mongo:6-jammy
        container_name: mongodb2
        hostname: mongodb2
        networks:
            - mongonet
        ports:
            - "27018:27018"
        environment:
          - MONGO_INITDB_ROOT_USERNAME=admin
          - MONGO_INITDB_ROOT_PASSWORD=adminpassword
        command: --config /etc/mongod.conf --port 27018 --replSet replica_set_single
        healthcheck:
            test: [ "CMD", "mongosh", "--port", "27018","--eval", "db.adminCommand('ping')" ]
            interval: 10s
            timeout: 2s
            retries: 5

  mongo_3:
        build:
          context: .
          dockerfile: Dockerfile
        image: mongo:6-jammy
        container_name: mongodb3
        hostname: mongodb3
        networks:
            - mongonet
        ports:
            - "27019:27019"
        environment:
          - MONGO_INITDB_ROOT_USERNAME=admin
          - MONGO_INITDB_ROOT_PASSWORD=adminpassword
        command: --config /etc/mongod.conf --port 27019 --replSet replica_set_single
        healthcheck:
            test: [ "CMD", "mongosh", "--port", "27019","--eval", "db.adminCommand('ping')" ]
            interval: 10s
            timeout: 2s
            retries: 5

  mongoinit:
    build:
      context: .
      dockerfile: Dockerfile
    image: mongo:6-jammy
    hostname: mongodbinit
    container_name: mongodbinit
    networks:
      - mongonet
    depends_on:
      mongo_1:
        condition: service_healthy
      mongo_2:
        condition: service_healthy
      mongo_3:
        condition: service_healthy
    command: mongosh --host mongodb1 --port 27017 --username admin --password adminpassword --file /scripts/initReplicaSet.js

  kafka1:
    image: docker.io/bitnami/kafka:3.6
    hostname: kafka1
    container_name: kafka1
    ports:
      - target: 9192
        published: 9192
        protocol: tcp
      - target: 9193
        published: 9193
        protocol: tcp
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_BROKER_RACK=RACK1
      - KAFKA_CFG_PROCESS_ROLES=broker, controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=CONTROLLER://:9193,DOCKER_EXTERNAL://kafka1:9192,DOCKER_INTERNAL://:19192
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT,DOCKER_INTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=DOCKER_EXTERNAL
      - KAFKA_CFG_ADVERTISED_LISTENERS=DOCKER_EXTERNAL://localhost:9192,DOCKER_INTERNAL://kafka1:19192
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9193,2@kafka2:9193,3@kafka3:9193
      - KAFKA_KRAFT_CLUSTER_ID=MWFlNjM4ZGFhYTY1MTFlZT
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka1_data:/bitnami/kafka
    networks:
      - kafkanet

volumes:
    kafka1_data:
        driver: local
    kafka2_data:
        driver: local
    kafka3_data:
        driver: local

networks:
  mongonet:
    driver: bridge
  kafkanet:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.25.0.0/16
